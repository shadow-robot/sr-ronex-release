#!/usr/bin/env python
PACKAGE="sr_ronex_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


command_enum = gen.enum([ gen.const("Normal", int_t, 1, "The command for normal operation"),
                          gen.const("Config", int_t, 2, "The command to request the config") ],
                        "Command Types")
gen.add("command_type", int_t, 0, "The command type to be sent.", 1, edit_method=command_enum)

spi_mode_enum = gen.enum([ gen.const("NL_RE", int_t, 0, "Clock normally low, sample on rising edge"),
                           gen.const("NL_FE", int_t, 1, "Clock normally low, sample on falling edge"),
                           gen.const("NH_FE", int_t, 2, "Clock normally high, sample on falling edge"),
                           gen.const("NH_RE", int_t, 3, "Clock normally high, sample on rising edge") ],
                           "SPI Modes.")

#list of possible input trigger configs
spi_input_trigger_enum = gen.enum([	gen.const("SPI_CONFIG_INPUT_TRIGGER_NONE", int_t, 0, "SPI input trigger NONE"),
                                    gen.const("SPI_CONFIG_INPUT_TRIGGER_D0", int_t, 4, "SPI input trigger D0"),
                                    gen.const("SPI_CONFIG_INPUT_TRIGGER_D1", int_t, 8, "SPI input trigger D1"),
                                    gen.const("SPI_CONFIG_INPUT_TRIGGER_D2", int_t, 12, "SPI input trigger D2"),
                                    gen.const("SPI_CONFIG_INPUT_TRIGGER_D3", int_t, 16, "SPI input trigger D3"),
                                    gen.const("SPI_CONFIG_INPUT_TRIGGER_D4", int_t, 20, "SPI input trigger D4"),
                                    gen.const("SPI_CONFIG_INPUT_TRIGGER_D5", int_t, 24, "SPI input trigger D5")],
                                    "Input trigger configurations.")
                           
#list of possible MOSI SOMI pin configs
spi_mosi_somi_enum = gen.enum([ gen.const("SPI_CONFIG_MOSI_SOMI_DIFFERENT_PIN", int_t, 0, "SPI MOSI SOMI different pin"),
                                gen.const("SPI_CONFIG_MOSI_SOMI_SAME_PIN", int_t, 32, "SPI MOSI SOMI same pin")],
                                "MOSI SOMI pin")



#config for spi packet 0
gen.add("spi_mode_0", int_t, 0, "Select SPI Mode for SPI 0.", 0, edit_method=spi_mode_enum)
gen.add("spi_0_input_trigger", int_t, 0, "The input trigger config - SPI[0]", 0, edit_method = spi_input_trigger_enum)
gen.add("spi_0_mosi_somi", int_t, 0, "The MOSI SOMI pin config - SPI[0]", 0, edit_method = spi_mosi_somi_enum)
gen.add("spi_0_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[0]", 0, 0, 255)
gen.add("spi_0_clock_divider", int_t, 0, "The Clock Divider - SPI[0]", 16, 0, 65535)

#config for spi packet 1
gen.add("spi_mode_1", int_t, 0, "Select SPI Mode for SPI 1.", 0, edit_method=spi_mode_enum)
gen.add("spi_1_input_trigger", int_t, 0, "The input trigger config - SPI[1]", 0, edit_method = spi_input_trigger_enum)
gen.add("spi_1_mosi_somi", int_t, 0, "The MOSI SOMI pin config - SPI[1]", 0, edit_method = spi_mosi_somi_enum)
gen.add("spi_1_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[1]", 0, 0, 255)
gen.add("spi_1_clock_divider", int_t, 0, "The Clock Divider - SPI[1]", 16, 0, 65535)

#config for spi packet 2
gen.add("spi_mode_2", int_t, 0, "Select SPI Mode for SPI 2.", 0, edit_method=spi_mode_enum)
gen.add("spi_2_input_trigger", int_t, 0, "The input trigger config - SPI[2]", 0, edit_method = spi_input_trigger_enum)
gen.add("spi_2_mosi_somi", int_t, 0, "The MOSI SOMI pin config - SPI[2]", 0, edit_method = spi_mosi_somi_enum)
gen.add("spi_2_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[2]", 0, 0, 255)
gen.add("spi_2_clock_divider", int_t, 0, "The Clock Divider - SPI[2]", 16, 0, 65535)

#config for spi packet 3
gen.add("spi_mode_3", int_t, 0, "Select SPI Mode for SPI 3.", 0, edit_method=spi_mode_enum)
gen.add("spi_3_input_trigger", int_t, 0, "The input trigger config - SPI[3]", 0, edit_method = spi_input_trigger_enum)
gen.add("spi_3_mosi_somi", int_t, 0, "The MOSI SOMI pin config - SPI[3]", 0, edit_method = spi_mosi_somi_enum)
gen.add("spi_3_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[3]", 0, 0, 255)
gen.add("spi_3_clock_divider", int_t, 0, "The Clock Divider - SPI[3]", 16, 0, 65535)



#pre / post pin states
gen.add("pin_output_state_pre_DIO_0", bool_t, 0, "The pre state pin for DIO 0", False)
gen.add("pin_output_state_post_DIO_0", bool_t, 0, "The post state pin for DIO 0", False)

gen.add("pin_output_state_pre_DIO_1", bool_t, 0, "The pre state pin for DIO 1", False)
gen.add("pin_output_state_post_DIO_1", bool_t, 0, "The post state pin for DIO 1", False)

gen.add("pin_output_state_pre_DIO_2", bool_t, 0, "The pre state pin for DIO 2", False)
gen.add("pin_output_state_post_DIO_2", bool_t, 0, "The post state pin for DIO 2", False)

gen.add("pin_output_state_pre_DIO_3", bool_t, 0, "The pre state pin for DIO 3", False)
gen.add("pin_output_state_post_DIO_3", bool_t, 0, "The post state pin for DIO 3", False)

gen.add("pin_output_state_pre_DIO_4", bool_t, 0, "The pre state pin for DIO 4", False)
gen.add("pin_output_state_post_DIO_4", bool_t, 0, "The post state pin for DIO 4", False)

gen.add("pin_output_state_pre_DIO_5", bool_t, 0, "The pre state pin for DIO 5", False)
gen.add("pin_output_state_post_DIO_5", bool_t, 0, "The post state pin for DIO 5", False)

gen.add("pin_output_state_pre_CS_0", bool_t, 0, "The pre state pin for spi CS 0", False)
gen.add("pin_output_state_post_CS_0", bool_t, 0, "The post state pin for spi CS 0", True)

gen.add("pin_output_state_pre_CS_1", bool_t, 0, "The pre state pin for spi CS 1", False)
gen.add("pin_output_state_post_CS_1", bool_t, 0, "The post state pin for spi CS 1", True)

gen.add("pin_output_state_pre_CS_2", bool_t, 0, "The pre state pin for spi CS 2", False)
gen.add("pin_output_state_post_CS_2", bool_t, 0, "The post state pin for spi CS 2", True)

gen.add("pin_output_state_pre_CS_3", bool_t, 0, "The pre state pin for spi CS 3", False)
gen.add("pin_output_state_post_CS_3", bool_t, 0, "The post state pin for spi CS 3", True)


exit(gen.generate(PACKAGE, "ronex", "SPI"))
