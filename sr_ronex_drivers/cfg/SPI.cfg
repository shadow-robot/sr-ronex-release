#!/usr/bin/env python
PACKAGE="sr_ronex_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


command_enum = gen.enum([ gen.const("Normal", int_t, 1, "The command for normal operation"),
                          gen.const("Config", int_t, 2, "The command to request the config") ],
                        "Command Types")
gen.add("command_type", int_t, 0, "The command type to be sent.", 1, edit_method=command_enum)

#pre / post pin states
gen.add("pin_output_state_pre_DIO_0", bool_t, 0, "The pre state pin for DIO 0", False)
gen.add("pin_output_state_post_DIO_0", bool_t, 0, "The post state pin for DIO 0", False)
gen.add("pin_output_state_pre_dir_DIO_0", bool_t, 0, "The pre direction pin for DIO 0", True)
gen.add("pin_output_state_post_dir_DIO_0", bool_t, 0, "The post direction pin for DIO 0", True)

gen.add("pin_output_state_pre_DIO_1", bool_t, 0, "The pre state pin for DIO 1", False)
gen.add("pin_output_state_post_DIO_1", bool_t, 0, "The post state pin for DIO 1", False)
gen.add("pin_output_state_pre_dir_DIO_1", bool_t, 0, "The pre direction pin for DIO 1", True)
gen.add("pin_output_state_post_dir_DIO_1", bool_t, 0, "The post direction pin for DIO 1", True)

gen.add("pin_output_state_pre_DIO_2", bool_t, 0, "The pre state pin for DIO 2", False)
gen.add("pin_output_state_post_DIO_2", bool_t, 0, "The post state pin for DIO 2", False)
gen.add("pin_output_state_pre_dir_DIO_2", bool_t, 0, "The pre direction pin for DIO 2", True)
gen.add("pin_output_state_post_dir_DIO_2", bool_t, 0, "The post direction pin for DIO 2", True)

gen.add("pin_output_state_pre_DIO_3", bool_t, 0, "The pre state pin for DIO 3", False)
gen.add("pin_output_state_post_DIO_3", bool_t, 0, "The post state pin for DIO 3", False)
gen.add("pin_output_state_pre_dir_DIO_3", bool_t, 0, "The pre direction pin for DIO 3", True)
gen.add("pin_output_state_post_dir_DIO_3", bool_t, 0, "The post direction pin for DIO 3", True)

gen.add("pin_output_state_pre_DIO_4", bool_t, 0, "The pre state pin for DIO 4", False)
gen.add("pin_output_state_post_DIO_4", bool_t, 0, "The post state pin for DIO 4", False)
gen.add("pin_output_state_pre_dir_DIO_4", bool_t, 0, "The pre direction pin for DIO 4", True)
gen.add("pin_output_state_post_dir_DIO_4", bool_t, 0, "The post direction pin for DIO 4", True)

gen.add("pin_output_state_pre_DIO_5", bool_t, 0, "The pre state pin for DIO 5", False)
gen.add("pin_output_state_post_DIO_5", bool_t, 0, "The post state pin for DIO 5", False)
gen.add("pin_output_state_pre_dir_DIO_5", bool_t, 0, "The pre direction pin for DIO 5", True)
gen.add("pin_output_state_post_dir_DIO_5", bool_t, 0, "The post direction pin for DIO 5", True)

gen.add("pin_output_state_pre_CS_0", bool_t, 0, "The pre state pin for spi CS 0", False)
gen.add("pin_output_state_post_CS_0", bool_t, 0, "The post state pin for spi CS 0", True)

gen.add("pin_output_state_pre_CS_1", bool_t, 0, "The pre state pin for spi CS 1", False)
gen.add("pin_output_state_post_CS_1", bool_t, 0, "The post state pin for spi CS 1", True)

gen.add("pin_output_state_pre_CS_2", bool_t, 0, "The pre state pin for spi CS 2", False)
gen.add("pin_output_state_post_CS_2", bool_t, 0, "The post state pin for spi CS 2", True)

gen.add("pin_output_state_pre_CS_3", bool_t, 0, "The pre state pin for spi CS 3", False)
gen.add("pin_output_state_post_CS_3", bool_t, 0, "The post state pin for spi CS 3", True)


#list of possible spi configs
spi_config_enum = gen.enum([ gen.const("SPI_CONFIG_MODE_00", int_t, 0, "Default mode"),
                             gen.const("SPI_CONFIG_MODE_01", int_t, 1, "SPI mode 01") ,
                             gen.const("SPI_CONFIG_MODE_10", int_t, 2, "SPI mode 10") ,
                             gen.const("SPI_CONFIG_MODE_11", int_t, 3, "SPI mode 11") ,
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_NONE", int_t, 0, "SPI input trigger NONE"),
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_D0", int_t, 4, "SPI input trigger D0"),
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_D1", int_t, 8, "SPI input trigger D1"),
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_D2", int_t, 12, "SPI input trigger D2"),
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_D3", int_t, 16, "SPI input trigger D3"),
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_D4", int_t, 20, "SPI input trigger D4"),
                             gen.const("SPI_CONFIG_INPUT_TRIGGER_D5", int_t, 24, "SPI input trigger D5"),
                             gen.const("SPI_CONFIG_MOSI_SOMI_DIFFERENT_PIN", int_t, 0, "SPI MOSI SOMI different pin"),
                             gen.const("SPI_CONFIG_MOSI_SOMI_SAME_PIN", int_t, 32, "SPI MOSI SOMI same pin")],
                           "The different SPI modes.")

#config for spi packet 0
gen.add("spi_0_clock_divider", int_t, 0, "The Clock Divider - SPI[0]", 16, 0, 65535)
gen.add("spi_0_SPI_config", int_t, 0, "The SPI Config - SPI[0]", 1, edit_method = spi_config_enum)
gen.add("spi_0_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[0]", 1, 0, 255)

#config for spi packet 1
gen.add("spi_1_clock_divider", int_t, 0, "The Clock Divider - SPI[1]", 1, 0, 65535)
gen.add("spi_1_SPI_config", int_t, 0, "The SPI Config - SPI[1]", 1, 0, 65535)
gen.add("spi_1_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[1]", 1, 0, 255)

#config for spi packet 2
gen.add("spi_2_clock_divider", int_t, 0, "The Clock Divider - SPI[2]", 1, 0, 65535)
gen.add("spi_2_SPI_config", int_t, 0, "The SPI Config - SPI[2]", 1, 0, 65535)
gen.add("spi_2_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[2]", 1, 0, 255)

#config for spi packet 3
gen.add("spi_3_clock_divider", int_t, 0, "The Clock Divider - SPI[3]", 1, 0, 65535)
gen.add("spi_3_SPI_config", int_t, 0, "The SPI Config - SPI[3]", 1, 0, 65535)
gen.add("spi_3_inter_byte_gap", int_t, 0, "The Inter Byte Gap - SPI[3]", 1, 0, 255)

exit(gen.generate(PACKAGE, "ronex", "SPI"))
